{"remainingRequest":"/Users/user/react-native-share/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/user/react-native-share/node_modules/babel-preset-react-app/index.js\",{\"flow\":true}]],\"plugins\":[],\"cacheDirectory\":true,\"babelrc\":false}!/Users/user/react-native-share/docs/Troubleshooting.mdx","dependencies":[{"path":"/Users/user/react-native-share/docs/Troubleshooting.mdx","mtime":1535657748000},{"path":"/Users/user/react-native-share/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/user/react-native-share/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\nexport default (function (_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"troubleshooting\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h1\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#troubleshooting\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Troubleshooting\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"share-remote-pdf-file-with-gmail--whatsapp-ios\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"h2\",\n    props: {\n      \"aria-hidden\": true,\n      \"href\": \"#share-remote-pdf-file-with-gmail--whatsapp-ios\"\n    }\n  }, React.createElement(MDXTag, {\n    name: \"span\",\n    components: components,\n    parentName: \"a\",\n    props: {\n      \"className\": \"icon-link\"\n    }\n  }, \"#\")), \"Share Remote PDF File with Gmail & WhatsApp (iOS)\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"When sharing a pdf file with base64, there are two current problems.\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"On WhatsApp base64 wont be recognized => nothing to share\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"In the GmailApp the file extension is wrong (.dat).\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Therefore we use this \\\"workaround\\\" in order to handle pdf sharing for iOS Apps to mentioned Apps\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Install react-native-fetch-blob\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Set a specific path in the RNFetchBlob configurations\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Download the PDF file to temp device storage\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\"\n  }, \"Share the response's path() of the donwloaded file directly\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Code:\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\"\n  }, \"static sharePDFWithIOS(fileUrl, type) {\\n  let filePath = null;\\n  let file_url_length = fileUrl.length;\\n  const configOptions = {\\n    fileCache: true,\\n    path:\\n      DIRS.DocumentDir + (type === 'application/pdf' ? '/SomeFileName.pdf' : '/SomeFileName.png') // no difference when using jpeg / jpg / png /\\n  };\\n  RNFetchBlob.config(configOptions)\\n    .fetch('GET', fileUrl)\\n    .then(async resp => {\\n      filePath = resp.path();\\n      let options = {\\n        type: type,\\n        url: filePath // (Platform.OS === 'android' ? 'file://' + filePath)\\n      };\\n      await Share.open(options);\\n      // remove the image or pdf from device's storage\\n      await RNFS.unlink(filePath);\\n    });\\n}\\n\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components\n  }, \"Nothing to do on Android. You can share the pdf file with base64\"), React.createElement(MDXTag, {\n    name: \"pre\",\n    components: components\n  }, React.createElement(MDXTag, {\n    name: \"code\",\n    components: components,\n    parentName: \"pre\"\n  }, \"static sharePDFWithAndroid(fileUrl, type) {\\n  let filePath = null;\\n  let file_url_length = fileUrl.length;\\n  const configOptions = { fileCache: true };\\n  RNFetchBlob.config(configOptions)\\n    .fetch('GET', fileUrl)\\n    .then(resp => {\\n      filePath = resp.path();\\n      return resp.readFile('base64');\\n    })\\n    .then(async base64Data => {\\n      base64Data = `data:${type};base64,` + base64Data;\\n      await Share.open({ url: base64Data });\\n      // remove the image or pdf from device's storage\\n      await RNFS.unlink(filePath);\\n    });\\n}\\n\")));\n});",{"version":3,"sources":["docs/Troubleshooting.mdx"],"names":["React","MDXTag","components","props"],"mappings":";;;;AACE,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,aAAvB;AAGF,gBAAe;AAAA,MAAEC,UAAF,QAAEA,UAAF;AAAA,MAAiBC,KAAjB;;AAAA,SAA4B,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAwB,IAAA,UAAU,EAAED;AAApC,KAAgD,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,KAAK,EAAE;AAAC,YAAK;AAAN;AAAjD,KAA2E,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAyC,IAAA,UAAU,EAAC,IAApD;AAAyD,IAAA,KAAK,EAAE;AAAC,qBAAc,IAAf;AAAoB,cAAO;AAA3B;AAAhE,KAAgH,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAEA,UAAhC;AAA4C,IAAA,UAAU,EAAC,GAAvD;AAA2D,IAAA,KAAK,EAAE;AAAC,mBAAY;AAAb;AAAlE,SAAhH,CAA3E,oBAAhD,EAC3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,KAAK,EAAE;AAAC,YAAK;AAAN;AAAjD,KAA0G,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA,UAA7B;AAAyC,IAAA,UAAU,EAAC,IAApD;AAAyD,IAAA,KAAK,EAAE;AAAC,qBAAc,IAAf;AAAoB,cAAO;AAA3B;AAAhE,KAA+I,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAEA,UAAhC;AAA4C,IAAA,UAAU,EAAC,GAAvD;AAA2D,IAAA,KAAK,EAAE;AAAC,mBAAY;AAAb;AAAlE,SAA/I,CAA1G,sDAD2C,EAE3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA;AAA7B,4EAF2C,EAG3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA;AAA9B,KACA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,iEADA,EAEA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,2DAFA,CAH2C,EAO3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA;AAA7B,0GAP2C,EAQ3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA;AAA9B,KACA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,uCADA,EAEA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,6DAFA,EAGA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,oDAHA,EAIA,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAkB,IAAA,UAAU,EAAEA,UAA9B;AAA0C,IAAA,UAAU,EAAC;AAArD,mEAJA,CAR2C,EAc3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA;AAA7B,aAd2C,EAe3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,KAAb;AAAmB,IAAA,UAAU,EAAEA;AAA/B,KAA2C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAEA,UAAhC;AAA4C,IAAA,UAAU,EAAC;AAAvD,8sBAA3C,CAf2C,EAqC3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,GAAb;AAAiB,IAAA,UAAU,EAAEA;AAA7B,wEArC2C,EAsC3C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,KAAb;AAAmB,IAAA,UAAU,EAAEA;AAA/B,KAA2C,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,UAAU,EAAEA,UAAhC;AAA4C,IAAA,UAAU,EAAC;AAAvD,wjBAA3C,CAtC2C,CAA5B;AAAA,CAAf","sourceRoot":"/Users/user/react-native-share","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"troubleshooting\"}}><MDXTag name=\"a\" components={components} parentName=\"h1\" props={{\"aria-hidden\":true,\"href\":\"#troubleshooting\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Troubleshooting`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"share-remote-pdf-file-with-gmail--whatsapp-ios\"}}><MDXTag name=\"a\" components={components} parentName=\"h2\" props={{\"aria-hidden\":true,\"href\":\"#share-remote-pdf-file-with-gmail--whatsapp-ios\"}}><MDXTag name=\"span\" components={components} parentName=\"a\" props={{\"className\":\"icon-link\"}}>{`#`}</MDXTag></MDXTag>{`Share Remote PDF File with Gmail & WhatsApp (iOS)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`When sharing a pdf file with base64, there are two current problems.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`On WhatsApp base64 wont be recognized => nothing to share`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`In the GmailApp the file extension is wrong (.dat).`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Therefore we use this \"workaround\" in order to handle pdf sharing for iOS Apps to mentioned Apps`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Install react-native-fetch-blob`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Set a specific path in the RNFetchBlob configurations`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Download the PDF file to temp device storage`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Share the response's path() of the donwloaded file directly`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Code:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\">{`static sharePDFWithIOS(fileUrl, type) {\n  let filePath = null;\n  let file_url_length = fileUrl.length;\n  const configOptions = {\n    fileCache: true,\n    path:\n      DIRS.DocumentDir + (type === 'application/pdf' ? '/SomeFileName.pdf' : '/SomeFileName.png') // no difference when using jpeg / jpg / png /\n  };\n  RNFetchBlob.config(configOptions)\n    .fetch('GET', fileUrl)\n    .then(async resp => {\n      filePath = resp.path();\n      let options = {\n        type: type,\n        url: filePath // (Platform.OS === 'android' ? 'file://' + filePath)\n      };\n      await Share.open(options);\n      // remove the image or pdf from device's storage\n      await RNFS.unlink(filePath);\n    });\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Nothing to do on Android. You can share the pdf file with base64`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\">{`static sharePDFWithAndroid(fileUrl, type) {\n  let filePath = null;\n  let file_url_length = fileUrl.length;\n  const configOptions = { fileCache: true };\n  RNFetchBlob.config(configOptions)\n    .fetch('GET', fileUrl)\n    .then(resp => {\n      filePath = resp.path();\n      return resp.readFile('base64');\n    })\n    .then(async base64Data => {\n      base64Data = \\`data:\\${type};base64,\\` + base64Data;\n      await Share.open({ url: base64Data });\n      // remove the image or pdf from device's storage\n      await RNFS.unlink(filePath);\n    });\n}\n`}</MDXTag></MDXTag></MDXTag>\n  "]}]}